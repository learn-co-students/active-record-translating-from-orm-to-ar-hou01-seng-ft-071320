1) Dog inheritence inherits from ActiveRecord::Base
     Failure/Error: expect(Dog.superclass).to eq(ActiveRecord::Base)
     
       expected: ActiveRecord::Base
            got: Object
     
       (compared using ==)
     
       Diff:
       @@ -1,2 +1,2 @@
       -ActiveRecord::Base
       +Object
       
     # ./spec/dog_spec.rb:16:in `block (3 levels) in <top (required)>'

  2) Dog attributes has a name and a breed
     Failure/Error: dog = Dog.new({name: "Fido", breed: "lab"})
     
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./spec/dog_spec.rb:22:in `initialize'
     # ./spec/dog_spec.rb:22:in `new'
     # ./spec/dog_spec.rb:22:in `block (3 levels) in <top (required)>'

  3) Dog .create takes in a hash of attributes and uses metaprogramming to create a new dog object. Then it uses the #save method to save that dog to the database
     Failure/Error: dog = Dog.create(name: "Ralph", breed: "lab")
     
     NoMethodError:
       undefined method `create' for Dog:Class
     # ./spec/dog_spec.rb:30:in `block (3 levels) in <top (required)>'

  4) Dog .save saves an instance of the dog class to the database and then sets the given dogs `id` attribute
     Failure/Error: dog = Dog.new({name: "Fido", breed: "lab"})
     
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./spec/dog_spec.rb:38:in `initialize'
     # ./spec/dog_spec.rb:38:in `new'
     # ./spec/dog_spec.rb:38:in `block (3 levels) in <top (required)>'

  5) Dog .update updates the record associated with a given instance
     Failure/Error: let(:teddy) {Dog.new(name: "Teddy", breed: "cockapoo")}
     
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./spec/dog_spec.rb:6:in `initialize'
     # ./spec/dog_spec.rb:6:in `new'
     # ./spec/dog_spec.rb:6:in `block (2 levels) in <top (required)>'
     # ./spec/dog_spec.rb:46:in `block (3 levels) in <top (required)>'

  6) Dog .find_or_create_by creates a dog if it does not already exist
     Failure/Error: dog1 = Dog.create(name: 'Teddy', breed: 'cockapoo')
     
     NoMethodError:
       undefined method `create' for Dog:Class
     # ./spec/dog_spec.rb:55:in `block (3 levels) in <top (required)>'

  7) Dog .find_by_name returns a dog that matches the name from the DB
     Failure/Error: let(:teddy) {Dog.new(name: "Teddy", breed: "cockapoo")}
     
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./spec/dog_spec.rb:6:in `initialize'
     # ./spec/dog_spec.rb:6:in `new'
     # ./spec/dog_spec.rb:6:in `block (2 levels) in <top (required)>'
     # ./spec/dog_spec.rb:63:in `block (3 levels) in <top (required)>'

  8) Dog .find_by_id returns a dog that matches the name from the DB
     Failure/Error: let(:teddy) {Dog.new(name: "Teddy", breed: "cockapoo")}
     
     ArgumentError:
       wrong number of arguments (given 1, expected 0)
     # ./spec/dog_spec.rb:6:in `initialize'
     # ./spec/dog_spec.rb:6:in `new'
     # ./spec/dog_spec.rb:6:in `block (2 levels) in <top (required)>'
     # ./spec/dog_spec.rb:72:in `block (3 levels) in <top (required)>'

Finished in 0.04674 seconds (files took 1.59 seconds to load)
8 examples, 8 failures

Failed examples:

rspec ./spec/dog_spec.rb:15 # Dog inheritence inherits from ActiveRecord::Base
rspec ./spec/dog_spec.rb:21 # Dog attributes has a name and a breed
rspec ./spec/dog_spec.rb:29 # Dog .create takes in a hash of attributes and uses metaprogramming to create a new dog object. Then it uses the #save method to save that dog to the database
rspec ./spec/dog_spec.rb:37 # Dog .save saves an instance of the dog class to the database and then sets the given dogs `id` attribute
rspec ./spec/dog_spec.rb:45 # Dog .update updates the record associated with a given instance
rspec ./spec/dog_spec.rb:54 # Dog .find_or_create_by creates a dog if it does not already exist
rspec ./spec/dog_spec.rb:62 # Dog .find_by_name returns a dog that matches the name from the DB
rspec ./spec/dog_spec.rb:71 # Dog .find_by_id returns a dog that matches the name from the DB
